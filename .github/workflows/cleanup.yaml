name: Cleanup Server Storage

on:
  workflow_dispatch: # Manual trigger
    inputs:
      project_name:
        description: 'Project name to cleanup'
        required: true
        default: 'enfyra-cms'
        type: string
  workflow_call: # Called by other workflows
    inputs:
      project_name:
        description: 'Project name to cleanup'
        required: true
        type: string
    secrets:
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      VPS_PASSWORD:
        required: true

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Server Storage
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "=== Starting Server Storage Cleanup ==="

            # Set project variables
            export PROJECT_NAME="${{ inputs.project_name }}"

            # Docker cleanup
            echo "=== Docker Cleanup ==="

            # Remove ALL old project images (keep only current deploy)
            echo "Removing ALL old $PROJECT_NAME Docker images..."
            docker images $PROJECT_NAME --format "{{.Repository}}:{{.Tag}}" | tail -n +2 | xargs -r docker rmi -f || true


            # Remove ALL localhost:32000 registry images (they're cached locally)
            echo "Removing ALL registry images..."
            docker images localhost:32000/* --format "{{.Repository}}:{{.Tag}}" | xargs -r docker rmi -f || true

            # Comprehensive cleanup
            docker image prune -af || true
            docker container prune -f || true
            docker volume prune -f || true
            docker network prune -f || true
            docker builder prune -af || true
            docker system prune -af --volumes || true

            # MicroK8s cleanup
            echo "=== MicroK8s Cleanup ==="

            # Remove ALL old project images from containerd (keep only current)
            echo "Removing ALL old $PROJECT_NAME images from containerd..."
            microk8s ctr images list -q | grep "$PROJECT_NAME:" | tail -n +2 | xargs -r microk8s ctr images remove || true


            # Aggressive registry cleanup (remove ALL old images except current)
            echo "Aggressive registry cleanup..."
            microk8s ctr images list -q | grep -E "($PROJECT_NAME:|localhost:32000)" | tail -n +5 | xargs -r microk8s ctr images remove || true

            # Containerd aggressive cleanup
            echo "Running containerd aggressive cleanup..."

            # Remove ALL localhost:32000 registry images from containerd
            echo "Removing registry images from containerd..."
            microk8s ctr images list name~='localhost:32000' -q | xargs -r microk8s ctr images remove || true

            # Prune references (recommended cleanup)
            echo "Pruning containerd references..."
            microk8s ctr content prune references || true

            # NUCLEAR: Remove ALL project images to break ALL dependencies
            echo "NUCLEAR: Removing ALL $PROJECT_NAME images..."
            microk8s ctr images list -q | grep "$PROJECT_NAME:" | xargs -r microk8s ctr images remove || true
            
            # NUCLEAR: Remove ALL registry images  
            echo "NUCLEAR: Removing ALL registry images..."
            microk8s ctr images list -q | grep "localhost:32000" | xargs -r microk8s ctr images remove || true
            
            # NUCLEAR: Force remove snapshots (most aggressive)
            echo "NUCLEAR: Force removing snapshots..."
            microk8s ctr snapshots ls | tail -n +2 | awk '{print $1}' | head -50 | xargs -r microk8s ctr snapshots remove || true
            
            # Multiple aggressive cleanup cycles
            echo "Multiple aggressive cleanup cycles..."
            for i in {1..10}; do
              echo "Aggressive cycle $i..."
              microk8s ctr content prune references || true
              docker system prune -af --volumes || true
              sleep 1
            done

            # Aggressive registry cleanup
            if microk8s status --addon registry &>/dev/null; then
              echo "Cleaning registry blobs and garbage collection..."
              
              # Get registry pod
              registry_pod=$(kubectl --namespace="container-registry" get pods --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' 2>/dev/null | head -1)
              if [ ! -z "$registry_pod" ]; then
                # Run garbage collection multiple times
                for i in {1..3}; do
                  echo "Registry GC cycle $i..."
                  kubectl exec --namespace="container-registry" $registry_pod -- /bin/registry garbage-collect /etc/docker/registry/config.yml || true
                  sleep 2
                done
                
                # Also try direct cleanup of old blobs
                echo "Direct registry storage cleanup..."
                kubectl exec --namespace="container-registry" $registry_pod -- find /var/lib/registry -name "*.sha256" -mtime +1 -delete || true
              fi
              
              # Alternative: Clean registry storage directly from host
              echo "Host-level registry cleanup..."
              find /var/snap/microk8s/common/default-storage/*/docker/registry/v2/blobs -name "sha256" -type d -exec find {} -name "*" -mtime +0 -delete \; 2>/dev/null || true
            fi

            # Remove evicted pods
            echo "Removing evicted pods..."
            kubectl get pods --all-namespaces | grep Evicted | awk '{print $2 " --namespace=" $1}' | xargs -r kubectl delete pod || true

            # Clean old replica sets
            echo "Cleaning old replica sets..."
            kubectl get replicaset --all-namespaces | grep '0         0         0' | awk '{print $2 " --namespace=" $1}' | head -10 | xargs -r kubectl delete replicaset || true

            # Clean temp files
            echo "Cleaning temp files..."
            rm -rf /tmp/$PROJECT_NAME-*.tar || true

            # Clean container logs
            echo "Truncating container logs..."
            find /var/lib/docker/containers/ -name "*.log" -exec truncate -s 0 {} \; 2>/dev/null || true

            # Final disk usage report
            echo "=== Final Disk Usage ==="
            df -h /
            echo "=== Docker Usage ==="
            docker system df || true
            echo "=== MicroK8s Images ==="
            microk8s ctr images list | grep -E "($PROJECT_NAME|SIZE)" | head -10
            echo "=== Cleanup Completed ==="
